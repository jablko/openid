#!/usr/bin/env python

import rfc6265, sys, time, untwisted
from random import random
from twisted.internet import reactor
from twisted.python import log
from twisted.web import http
from untwisted import db

log.startLogging(sys.stdout)

conn = db.connect(db='dbmail', user='dbmail')

@untwisted.call
class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
    class requestFactory(http.Request):
      cookie = set()

      def requestReceived(ctx, method, resource, version):
        ctx.client = ctx.channel.transport.getPeer()
        ctx.clientproto = version

        # For log
        ctx.method = method
        ctx.uri = resource

        if '/cookie' == resource:
          if 'POST' == method:
            for cookieString in ctx.requestHeaders.getRawHeaders('Cookie', ()):
              for cookiePair in rfc6265.cookieString.match(cookieString, 'cookiePair ( cookieName, cookieValue )'):
                if 'openid' == str(cookiePair.cookieName):
                  ctx.cookie.discard(str(cookiePair.cookieValue))

            ctx.content.seek(0)
            params = http.parse_qs(ctx.content.read())

            password, = params['password']

            for cursor in conn:
              count, = cursor.execute('SELECT COUNT(*) FROM dbmail_users WHERE passwd = %s', password).next()

            if count:

              # US-ASCII characters excluding CTLs, whitespace DQUOTE, comma,
              # semicolon, and backslash
              alphabet = chr(0x21) + ''.join(map(chr, range(0x23, 0x2b + 1))) + ''.join(map(chr, range(0x2d, 0x3a + 1))) + ''.join(map(chr, range(0x3c, 0x5b + 1))) + ''.join(map(chr, range(0x5d, 0x7e + 1)))

              # Choose six letters from alphabet, at random
              letter = random()
              cookie = ''
              for _ in range(6):
                letter *= len(alphabet)
                cookie += alphabet[int(letter)]
                letter -= int(letter)

              ctx.cookie.add(cookie)

              ctx.setHeader('Set-Cookie', 'openid=' + cookie)

              ctx.redirect('/cookie')

              return ctx.finish()

          ctx.setHeader('Content-Type', 'text/html')

          ctx.write(''.join(('<html>',
              '<head>',
                '<title></title>',
              '</head><body>',
                '<form method="post">',
                  '<input name="password" type="password"/>',
                  '<input type="submit"/>',
                '</form>',
              '</body>',
            '</html>')))

          return ctx.finish()

        if 'GET' == method:
          _, query = resource.split('?', 1)
          params = http.parse_qs(query)

        elif 'POST' == method:
          ctx.content.seek(0)
          params = http.parse_qs(ctx.content.read())

          mode, = params['openid.mode']

          # All direct requests are HTTP POST
          if 'check_authentication' == mode:
            ctx.write(''.join(('is_valid:true\n',
              'ns:http://specs.openid.net/auth/2.0\n')))

            return ctx.finish()

        mode, = params['openid.mode']
        if 'checkid_setup' == mode:
          returnTo, = params['openid.return_to']

          # Default: return_to URL
          try:
            realm, = params['openid.realm']

          except KeyError:
            realm = returnTo

          else:

            # When present, the "openid.return_to" URL MUST match the
            # "openid.realm", or the OP MUST return an indirect error response
            if not returnTo.startswith(realm):
              ctx.setHeader('Content-Type', 'text/html')

              ctx.write(''.join(('<html>',
                '<head>',
                  '<title></title>',
                '</head><body onload="document.forms[0].submit()">',
                  '<form action="{}" method="post">'.format(returnTo))))

              for key, value in (('mode', 'error'),
                  ('ns', 'http://specs.openid.net/auth/2.0')):
                ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

              ctx.write(''.join(('<input type="submit" value="Continue"/>',
                    '</form>',
                    '<script>document.forms[0].style.display = "none"</script>',
                  '</body>',
                '</html>')))

              return ctx.finish()

          for cookieString in ctx.requestHeaders.getRawHeaders('Cookie', ()):
            for cookiePair in rfc6265.cookieString.match(cookieString, 'cookiePair ( cookieName, cookieValue )'):
              if 'openid' == str(cookiePair.cookieName) and str(cookiePair.cookieValue) in ctx.cookie:
                ctx.setHeader('Content-Type', 'text/html')

                ctx.write(''.join(('<html>',
                  '<head>',
                    '<title></title>',
                  '</head><body>',
                    realm,
                    '<form action="{}" method="post">'.format(returnTo))))

                for key, value in (('mode', 'cancel'),
                    ('ns', 'http://specs.openid.net/auth/2.0')):
                  ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

                ctx.write(''.join(('<input type="submit" value="Reject"/>',
                  '</form><form action="{}" method="post">'.format(returnTo))))

                for key, value in (('assoc_handle', 'TODO'),
                    ('mode', 'id_res'),
                    ('ns', 'http://specs.openid.net/auth/2.0'),
                    ('op_endpoint', resource),
                    ('response_nonce', time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())),
                    ('return_to', returnTo),
                    ('sig', 'TODO'),
                    ('signed', 'assoc_handle,op_endpoint,response_nonce,return_to')):
                  ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

                ctx.write(''.join(('<input type="submit" value="Approve"/>',
                      '</form>',
                    '</body>',
                  '</html>')))

                return ctx.finish()

          ctx.setHeader('Content-Type', 'text/html')

          ctx.write(''.join(('<html>',
            '<head>',
              '<title></title>',
            '</head><body onload="document.forms[0].submit()">',
              '<form action="{}" method="post">'.format(returnTo))))

          for key, value in (('mode', 'cancel'),
              ('ns', 'http://specs.openid.net/auth/2.0')):
            ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

          ctx.write(''.join(('<input type="submit" value="Continue"/>',
                '</form>',
                '<script>document.forms[0].style.display = "none"</script>',
              '</body>',
            '</html>')))

        ctx.finish()

reactor.listenTCP(5629, factory, interface='localhost')

reactor.run()
