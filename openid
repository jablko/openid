#!/usr/bin/env python

import base64, hashlib, hmac, os, pickle, rfc6265, sys, time, untwisted, urllib
from lxml import etree
from random import random
from twisted.internet import reactor
from twisted.python import log
from twisted.web import http
from untwisted import db, promise

opEndpoint = 'http://mail.nottheoilrig.com/openid'

# Arbitrary precision integers MUST be encoded as big-endian signed two's
# complement binary strings
btwocEnc = lambda asdf: pickle.encode_long(asdf)[::-1] if asdf else '\x00'
btwocDec = lambda asdf: pickle.decode_long(asdf[::-1])

def timeout(secs, *args, **kwds):
  ctx = promise.promise()

  reactor.callLater(secs, untwisted.partial(ctx, *args or (None,), **kwds))

  return ctx

urlencoded = lambda asdf: untwisted.manyMap(*(map(urllib.unquote_plus, asdf.split('=', 1)) for asdf in asdf.split('&')))

log.startLogging(sys.stdout)

asdf = db.connect(db='cookie', user='root')
dbmail = db.connect(db='dbmail', user='dbmail')

@untwisted.call
class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
    class requestFactory(http.Request):
      cookie = set()

      private = {}
      shared = {}

      def requestReceived(ctx, method, resource, version):
        ctx.client = ctx.channel.transport.getPeer()
        ctx.clientproto = version

        # For log
        ctx.method = method
        ctx.uri = resource

        if '/cookie' == resource:
          if 'POST' == method:
            for cookieString in ctx.requestHeaders.getRawHeaders('Cookie', ()):
              for cookiePair in rfc6265.cookieString.match(cookieString, 'cookiePair ( cookieName, cookieValue )'):
                if 'openid' == str(cookiePair.cookieName):
                  ctx.cookie.discard(str(cookiePair.cookieValue))

            ctx.content.seek(0)
            params = urlencoded(ctx.content.read())

            if str(params['password']):
              for cursor in dbmail:
                count, = cursor.execute('SELECT COUNT(*) FROM dbmail_users WHERE passwd = %s', params['password']).next()

              if count:

                # US-ASCII characters excluding CTLs, whitespace DQUOTE, comma,
                # semicolon, and backslash
                cookie = untwisted.randstr(6, chr(0x21) + ''.join(map(chr, range(0x23, 0x2b + 1))) + ''.join(map(chr, range(0x2d, 0x3a + 1))) + ''.join(map(chr, range(0x3c, 0x5b + 1))) + ''.join(map(chr, range(0x5d, 0x7e + 1))))

                ctx.cookie.add(cookie)

                ctx.setHeader('Set-Cookie', 'openid=' + cookie)

                ctx.redirect('/cookie')

                return ctx.finish()

          ctx.setHeader('Content-Type', 'text/html')

          ctx.write(''.join((
            '<html>',
              '<head>',
                '<title></title>',
              '</head><body>',
                '<form method="post">',
                  '<input name="password" type="password"/>',
                  '<input type="submit"/>',
                '</form>',
              '</body>',
            '</html>')))

          return ctx.finish()

        if 'GET' == method:
          _, query = resource.split('?', 1)
          params = urlencoded(query)

        elif 'POST' == method:
          ctx.content.seek(0)
          params = urlencoded(ctx.content.read())

          # All direct requests are HTTP POST

          if 'associate' == str(params['openid.mode']):

            # ASCII characters in the range 33-126 inclusive (printable
            # non-whitespace characters)
            assocHandle = untwisted.randstr(6, ''.join(map(chr, range(33, 126 + 1))))

            try:
              g = btwocDec(base64.b64decode(params['openid.dh_gen'].replace('-', '+').replace('_', '/')))

            except KeyError:
              g = 2

            try:
              p = btwocDec(base64.b64decode(params['openid.dh_modulus'].replace('-', '+').replace('_', '/')))

            except KeyError:

              # This is a confirmed-prime number, used as the default modulus
              # for Diffie-Hellman Key Exchange
              p = 0xdcf93a0b883972ec0e19989ac5a2ce310e1d37717e8d9571bb7623731866e61ef75a2e27898b057f9891c2e27a639c3f29b60814581cd3b2ca3986d2683705577d45c2e7e52dc81c7a171876e5cea74b1448bfdfaf18828efd2519f14e45e3826634af1949e5b535cc829a483b8a76223e5d490a257f05bdff16f2fb22c583ab

            # Random private key xb, in the range [1 .. p-1]
            xb = int(random() * p)

            dhServerPublic = base64.b64encode(btwocEnc(pow(g, xb, p)))

            # The MAC key MUST be the same length as the output of H, the hash
            # function - 160 bits (20 bytes) for DH-SHA1 or 256 bits (32 bytes)
            # for DH-SHA256, as well as the output of the signature algorithm
            # of this association

            if 'DH-SHA1' == str(params['openid.session_type']):
              H = hashlib.sha1()

              if 'HMAC-SHA1' == str(params['openid.assoc_type']):
                key = os.urandom(20)

            elif 'DH-SHA256' == str(params['openid.session_type']):
              H = hashlib.sha256()

              if 'HMAC-SHA256' == str(params['openid.assoc_type']):
                key = os.urandom(32)

            ctx.shared[assocHandle] = key

            # 14 days, in seconds
            timeout(14 * 24 * 60 * 60).then(lambda _: ctx.shared.__delitem__(assocHandle))

            H.update(btwocEnc(pow(btwocDec(base64.b64decode(params['openid.dh_consumer_public'].replace('-', '+').replace('_', '/'))), xb, p)))
            encMacKey = base64.b64encode(''.join(chr(ord(digest) ^ ord(key)) for digest, key in zip(H.digest(), key)))

            ctx.write('\n'.join(map(':'.join, (
              ('assoc_handle', assocHandle),
              ('assoc_type', str(params['openid.assoc_type'])),
              ('dh_server_public', dhServerPublic),
              ('enc_mac_key', encMacKey),
              ('expires_in', str(14 * 24 * 60 * 60)),
              ('ns', 'http://specs.openid.net/auth/2.0'),
              ('session_type', str(params['openid.session_type']))))) + '\n')

            return ctx.finish()

          if 'check_authentication' == str(params['openid.mode']):
            try:

              # For verifying signatures an OP MUST only use private
              # associations and MUST NOT use associations that have shared
              # keys.  If the verification request contains a handle for a
              # shared association, it means the Relying Party no longer knows
              # the shared secret, or an entity other than the RP (e.g. an
              # attacker) has established this association with the OP
              key = ctx.private[str(params['openid.assoc_handle'])]

            except KeyError:
              pass

            else:
              if hmac.new(key, '\n'.join(signed + ':' + str(params['openid.' + signed]) for signed in params['openid.signed'].split(',')) + '\n', hashlib.sha256).digest() == base64.b64decode(params['openid.sig'].replace('-', '+').replace('_', '/')):
                ctx.write('\n'.join(map(':'.join, (
                  ('is_valid', 'true'),
                  ('ns', 'http://specs.openid.net/auth/2.0')))) + '\n')

                return ctx.finish()

            ctx.write('\n'.join(map(':'.join, (
              ('is_valid', 'false'),
              ('ns', 'http://specs.openid.net/auth/2.0')))) + '\n')

            return ctx.finish()

        if 'checkid_setup' == str(params['openid.mode']):

          # Default: return_to URL
          try:
            realm = str(params['openid.realm'])

          except KeyError:
            realm = str(params['openid.return_to'])

          else:

            # When present, the "openid.return_to" URL MUST match the
            # "openid.realm", or the OP MUST return an indirect error response
            if not params['openid.return_to'].startswith(realm):
              ctx.setHeader('Content-Type', 'text/html')

              ctx.write(''.join((
                '<html>',
                  '<head>',
                    '<title></title>',
                  '</head><body onload="document.forms[0].submit()">')))

              form = etree.Element('form', action=str(params['openid.return_to']), method='post')

              for key, value in (
                  ('mode', 'error'),
                  ('ns', 'http://specs.openid.net/auth/2.0')):
                form.append(etree.Element('input', name='openid.' + key, type='hidden', value=value))

              form.append(etree.Element('input', type='submit', value='Continue'))

              ctx.write(etree.tostring(form))

              ctx.write(''.join((
                    '<script>document.forms[0].style.display = "none"</script>',
                  '</body>',
                '</html>')))

              return ctx.finish()

          for cookieString in ctx.requestHeaders.getRawHeaders('Cookie', ()):
            for cookiePair in rfc6265.cookieString.match(cookieString, 'cookiePair ( cookieName, cookieValue )'):
              if 'openid' == str(cookiePair.cookieName) and str(cookiePair.cookieValue) in ctx.cookie:
                try:
                  for cursor in asdf:
                    sender, = cursor.execute('SELECT sender FROM address WHERE address = %s', realm).next()

                except StopIteration:
                  sender = untwisted.randstr(6, '0123456789abcdefghijklmnopqrstuvwxyz')

                  for cursor in asdf:
                    cursor.execute('INSERT INTO address (address, sender) VALUES (%s, %s)', realm, sender)

                # ASCII characters in the range 33-126 inclusive (printable
                # non-whitespace characters)
                assocHandle = untwisted.randstr(6, ''.join(map(chr, range(33, 126 + 1))))

                signed = [
                  ('assoc_handle', assocHandle),
                  ('claimed_id', 'http://nottheoilrig.com/' + sender),
                  ('identity', 'http://nottheoilrig.com/' + sender),
                  ('op_endpoint', opEndpoint),
                  ('response_nonce', time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())),
                  ('return_to', str(params['openid.return_to']))]

                alias = {}
                for key, value in params:
                  if key.startswith('openid.ns.'):
                    alias[str(value)] = key[len('openid.ns.'):]

                ctx.setHeader('Content-Type', 'text/html')

                ctx.write(''.join((
                  '<html>',
                    '<head>',
                      '<title></title>',
                    '</head><body>')))

                div = etree.Element('div')
                div.text = realm

                ctx.write(etree.tostring(div))

                form = etree.Element('form', action=str(params['openid.return_to']), method='post')

                for key, value in (
                    ('mode', 'cancel'),
                    ('ns', 'http://specs.openid.net/auth/2.0')):
                  form.append(etree.Element('input', name='openid.' + key, type='hidden', value=value))

                form.append(etree.Element('input', type='submit', value='Reject'))

                ctx.write(etree.tostring(form))

                form = etree.Element('form', action=str(params['openid.return_to']), method='post')

                try:
                  axAlias = alias['http://openid.net/srv/ax/1.0']

                except KeyError:
                  pass

                else:
                  form.append(etree.Element('input', name='openid.ns.' + axAlias, type='hidden', value='http://openid.net/srv/ax/1.0'))
                  form.append(etree.Element('input', name='openid.{}.mode'.format(axAlias), type='hidden', value='fetch_response'))

                  axType = {}
                  for key, value in params:
                    if key.startswith('openid.{}.type.'.format(axAlias)):
                      axType[key[len('openid.{}.type.'.format(axAlias)):]] = str(value)

                  axValue = {
                    'http://schema.openid.net/contact/email': sender + '@nottheoilrig.com',
                    'http://axschema.org/contact/email': sender + '@nottheoilrig.com',
                    'http://schema.openid.net/namePerson': 'Jack Bates',
                    'http://axschema.org/namePerson': 'Jack Bates',
                    'http://schema.openid.net/namePerson/first': 'Jack',
                    'http://axschema.org/namePerson/first': 'Jack',
                    'http://schema.openid.net/namePerson/last': 'Bates',
                    'http://axschema.org/namePerson/last': 'Bates' }

                  for itm in 'if_available', 'required':
                    try:
                      attribute = params['openid.{}.'.format(axAlias) + itm]

                    except KeyError:
                      continue

                    ctx.write('<ul>')

                    for attribute in attribute.split(','):
                      li = etree.Element('li')
                      li.text = axType[attribute]

                      ctx.write(etree.tostring(li))

                      form.append(etree.Element('input', name='openid.{}.type.'.format(axAlias) + attribute, type='hidden', value=axType[attribute]))
                      form.append(etree.Element('input', name='openid.{}.value.'.format(axAlias) + attribute, type='hidden', value=axValue[axType[attribute]]))

                    ctx.write('</ul>')

                sreg = {
                  'nickname': 'nottheoilrig',
                  'email': sender + '@nottheoilrig.com',
                  'fullname': 'Jack Bates' }

                for itm in 'optional', 'required':
                  try:
                    field = params['openid.sreg.' + itm]

                  except KeyError:
                    continue

                  signed.extend(zip(map('sreg.'.__add__, field.split(',')), map(sreg.get, field.split(','))))

                  ctx.write('<ul>')

                  for field in field.split(','):
                    li = etree.Element('li')
                    li.text = field

                    ctx.write(etree.tostring(li))

                  ctx.write('</ul>')

                div = etree.Element('div')
                try:
                  div.text = str(params['openid.sreg.policy_url'])

                except KeyError:
                  pass

                else:
                  ctx.write(etree.tostring(div))

                key = os.urandom(32)

                ctx.private[assocHandle] = key

                # 14 days, in seconds
                timeout(14 * 24 * 60 * 60).then(lambda _: ctx.private.__delitem__(assocHandle))

                signed.extend((
                  ('mode', 'id_res'),
                  ('ns', 'http://specs.openid.net/auth/2.0'),
                  ('sig', base64.b64encode(hmac.new(key, '\n'.join(map(':'.join, signed)) + '\n', hashlib.sha256).digest())),
                  ('signed', ','.join(signed for signed, _ in signed))))

                for key, value in signed:
                  form.append(etree.Element('input', name='openid.' + key, type='hidden', value=value))

                form.append(etree.Element('input', type='submit', value='Approve'))

                ctx.write(etree.tostring(form))

                ctx.write(''.join((
                    '</body>',
                  '</html>')))

                return ctx.finish()

          ctx.setHeader('Content-Type', 'text/html')

          ctx.write(''.join((
            '<html>',
              '<head>',
                '<title></title>',
              '</head><body onload="document.forms[0].submit()">')))

          form = etree.Element('form', action=str(params['openid.return_to']), method='post')

          for key, value in (
              ('mode', 'cancel'),
              ('ns', 'http://specs.openid.net/auth/2.0')):
            form.append(etree.Element('input', name='openid.' + key, type='hidden', value=value))

          form.append(etree.Element('input', type='submit', value='Continue'))

          ctx.write(etree.tostring(form))

          ctx.write(''.join((
                '<script>document.forms[0].style.display = "none"</script>',
              '</body>',
            '</html>')))

        ctx.finish()

reactor.listenTCP(5629, factory, interface='localhost')

reactor.run()
