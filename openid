#!/usr/bin/env python

import base64, hashlib, rfc6265, sys, time, untwisted
from random import random
from twisted.internet import reactor
from twisted.python import log
from twisted.web import http
from untwisted import db, promise

opEndpoint = 'http://mail.nottheoilrig.com/openid'

def timeout(secs, *args, **kwds):
  ctx = promise.promise()

  reactor.callLater(secs, untwisted.partial(ctx, *args or (None,), **kwds))

  return ctx

log.startLogging(sys.stdout)

asdf = db.connect(db='cookie', user='root')
dbmail = db.connect(db='dbmail', user='dbmail')

@untwisted.call
class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
    class requestFactory(http.Request):
      assoc = set()
      cookie = set()

      def requestReceived(ctx, method, resource, version):
        ctx.client = ctx.channel.transport.getPeer()
        ctx.clientproto = version

        # For log
        ctx.method = method
        ctx.uri = resource

        if '/cookie' == resource:
          if 'POST' == method:
            for cookieString in ctx.requestHeaders.getRawHeaders('Cookie', ()):
              for cookiePair in rfc6265.cookieString.match(cookieString, 'cookiePair ( cookieName, cookieValue )'):
                if 'openid' == str(cookiePair.cookieName):
                  ctx.cookie.discard(str(cookiePair.cookieValue))

            ctx.content.seek(0)
            params = http.parse_qs(ctx.content.read())

            password, = params['password']

            for cursor in dbmail:
              count, = cursor.execute('SELECT COUNT(*) FROM dbmail_users WHERE passwd = %s', password).next()

            if count:

              # US-ASCII characters excluding CTLs, whitespace DQUOTE, comma,
              # semicolon, and backslash
              alphabet = chr(0x21) + ''.join(map(chr, range(0x23, 0x2b + 1))) + ''.join(map(chr, range(0x2d, 0x3a + 1))) + ''.join(map(chr, range(0x3c, 0x5b + 1))) + ''.join(map(chr, range(0x5d, 0x7e + 1)))

              # Choose six letters from alphabet, at random
              letter = random()
              cookie = ''
              for _ in range(6):
                letter *= len(alphabet)
                cookie += alphabet[int(letter)]
                letter -= int(letter)

              ctx.cookie.add(cookie)

              ctx.setHeader('Set-Cookie', 'openid=' + cookie)

              ctx.redirect('/cookie')

              return ctx.finish()

          ctx.setHeader('Content-Type', 'text/html')

          ctx.write(''.join(('<html>',
              '<head>',
                '<title></title>',
              '</head><body>',
                '<form method="post">',
                  '<input name="password" type="password"/>',
                  '<input type="submit"/>',
                '</form>',
              '</body>',
            '</html>')))

          return ctx.finish()

        if 'GET' == method:
          _, query = resource.split('?', 1)
          params = http.parse_qs(query)

        elif 'POST' == method:
          ctx.content.seek(0)
          params = http.parse_qs(ctx.content.read())

          # All direct requests are HTTP POST
          mode, = params['openid.mode']

          if 'associate' == mode:

            # ASCII characters in the range 33-126 inclusive (printable
            # non-whitespace characters)
            alphabet = ''.join(map(chr, range(33, 126 + 1)))

            # Choose six letters from alphabet, at random
            letter = random()
            assocHandle = ''
            for _ in range(6):
              letter *= len(alphabet)
              assocHandle += alphabet[int(letter)]
              letter -= int(letter)

            ctx.assoc.add(assocHandle)

            # 14 days, in seconds
            timeout(14 * 24 * 60 * 60).then(lambda _: ctx.assoc.remove(assocHandle))

            try:
              dhGen, = params['openid.dh_gen']
              g = base64.b64decode(dhGen)

            except KeyError:
              g = 2

            try:
              dhModulus, = params['openid.dh_modulus']
              p = base64.b64decode(dhModulus)

            except KeyError:

              # This is a confirmed-prime number, used as the default modulus
              # for Diffie-Hellman Key Exchange
              p = 0xdcf93a0b883972ec0e19989ac5a2ce310e1d37717e8d9571bb7623731866e61ef75a2e27898b057f9891c2e27a639c3f29b60814581cd3b2ca3986d2683705577d45c2e7e52dc81c7a171876e5cea74b1448bfdfaf18828efd2519f14e45e3826634af1949e5b535cc829a483b8a76223e5d490a257f05bdff16f2fb22c583ab

            # Random private key xb, in the range [1 .. p-1]
            xb = random() * p

            dhServerPublic = base64.b64encode(pow(g, xb, p))

            dhConsumerPublic, = params['openid.dh_consumer_public']

            assocType, = params['openid.assoc_type']
            sessionType, = params['openid.session_type']

            # The MAC key MUST be the same length as the output of H, the hash
            # function - 160 bits (20 bytes) for DH-SHA1 or 256 bits (32 bytes)
            # for DH-SHA256, as well as the output of the signature algorithm
            # of this association

            if 'DH-SHA1' == sessionType:
              H = hashlib.sha1()

              if 'HMAC-SHA1' == assocType:
                key = int(random() * 2 ** 160)

            elif 'DH-SHA256' == sessionType:
              H = hashlib.sha256()

              if 'HMAC-SHA256' == assocType:
                key = int(random() * 2 ** 256)

            H.update(pow(base64.b64decode(dhConsumerPublic), xb, p))
            encMacKey = base64.b64encode(H.digest() ^ key)

            ctx.write(''.join(('assoc_handle:{}\n'.format(assocHandle),
              'assoc_type:{}\n'.format(assocType),
              'dh_server_public:{}\n'.format(dhServerPublic),
              'enc_mac_key:{}\n'.format(encMacKey),
              'expires_in:{}\n'.format(14 * 24 * 60 * 60),
              'ns:http://specs.openid.net/auth/2.0\n',
              'session_type:{}\n'.format(sessionType))))

            return ctx.finish()

          if 'check_authentication' == mode:
            assocHandle, = params['openid.assoc_handle']
            if assocHandle in ctx.assoc:
              ctx.write(''.join(('is_valid:true\n',
                'ns:http://specs.openid.net/auth/2.0\n')))

              return ctx.finish()

            ctx.write(''.join(('is_valid:false\n',
              'ns:http://specs.openid.net/auth/2.0\n')))

            return ctx.finish()

        mode, = params['openid.mode']

        if 'checkid_setup' == mode:
          returnTo, = params['openid.return_to']

          # Default: return_to URL
          try:
            realm, = params['openid.realm']

          except KeyError:
            realm = returnTo

          else:

            # When present, the "openid.return_to" URL MUST match the
            # "openid.realm", or the OP MUST return an indirect error response
            if not returnTo.startswith(realm):
              ctx.setHeader('Content-Type', 'text/html')

              ctx.write(''.join(('<html>',
                '<head>',
                  '<title></title>',
                '</head><body onload="document.forms[0].submit()">',
                  '<form action="{}" method="post">'.format(returnTo))))

              for key, value in (('mode', 'error'),
                  ('ns', 'http://specs.openid.net/auth/2.0')):
                ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

              ctx.write(''.join(('<input type="submit" value="Continue"/>',
                    '</form>',
                    '<script>document.forms[0].style.display = "none"</script>',
                  '</body>',
                '</html>')))

              return ctx.finish()

          for cookieString in ctx.requestHeaders.getRawHeaders('Cookie', ()):
            for cookiePair in rfc6265.cookieString.match(cookieString, 'cookiePair ( cookieName, cookieValue )'):
              if 'openid' == str(cookiePair.cookieName) and str(cookiePair.cookieValue) in ctx.cookie:
                try:
                  for cursor in asdf:
                    sender, = cursor.execute('SELECT sender FROM address WHERE address = %s', realm).next()

                except StopIteration:
                  alphabet = '0123456789abcdefghijklmnopqrstuvwxyz'

                  # Choose six letters from alphabet, at random
                  letter = random()
                  sender = ''
                  for _ in range(6):
                    letter *= len(alphabet)
                    sender += alphabet[int(letter)]
                    letter -= int(letter)

                  for cursor in asdf:
                    cursor.execute('INSERT INTO address (address, sender) VALUES (%s, %s)', realm, sender)

                # ASCII characters in the range 33-126 inclusive (printable
                # non-whitespace characters)
                alphabet = ''.join(map(chr, range(33, 126 + 1)))

                # Choose six letters from alphabet, at random
                letter = random()
                assocHandle = ''
                for _ in range(6):
                  letter *= len(alphabet)
                  assocHandle += alphabet[int(letter)]
                  letter -= int(letter)

                ctx.assoc.add(assocHandle)

                # 14 days, in seconds
                timeout(14 * 24 * 60 * 60).then(lambda _: ctx.assoc.remove(assocHandle))

                signed = ['assoc_handle', 'claimed_id', 'identity', 'op_endpoint', 'response_nonce', 'return_to']

                alias = {}
                for key, value in params.iteritems():
                  if key.startswith('openid.ns.'):
                    value, = value
                    alias[value] = key[len('openid.ns.'):]

                ctx.setHeader('Content-Type', 'text/html')

                ctx.write(''.join(('<html>',
                  '<head>',
                    '<title></title>',
                  '</head><body>',
                    realm,
                    '<form action="{}" method="post">'.format(returnTo))))

                for key, value in (('mode', 'cancel'),
                    ('ns', 'http://specs.openid.net/auth/2.0')):
                  ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

                ctx.write(''.join(('<input type="submit" value="Reject"/>',
                  '</form><form action="{}" method="post">'.format(returnTo))))

                try:
                  axAlias = alias['http://openid.net/srv/ax/1.0']

                except KeyError:
                  pass

                else:
                  ctx.write(''.join(('<input name="openid.ns.{}" type="hidden" value="http://openid.net/srv/ax/1.0"/>'.format(axAlias),
                    '<input name="openid.{}.mode" type="hidden" value="fetch_response"/>'.format(axAlias))))

                  axType = {}
                  for key, value in params.iteritems():
                    if key.startswith('openid.{}.type.'.format(axAlias)):
                      value, = value
                      axType[key[len('openid.{}.type.'.format(axAlias)):]] = value

                  axValue = {
                    'http://schema.openid.net/contact/email': sender + '@nottheoilrig.com',
                    'http://axschema.org/contact/email': sender + '@nottheoilrig.com',
                    'http://schema.openid.net/namePerson': 'Jack Bates',
                    'http://axschema.org/namePerson': 'Jack Bates',
                    'http://schema.openid.net/namePerson/first': 'Jack',
                    'http://axschema.org/namePerson/first': 'Jack',
                    'http://schema.openid.net/namePerson/last': 'Bates',
                    'http://axschema.org/namePerson/last': 'Bates' }

                  for itm in 'if_available', 'required':
                    try:
                      attribute, = params['openid.{}.'.format(axAlias) + itm]

                    except KeyError:
                      continue

                    ctx.write('<ul>')

                    for attribute in attribute.split(','):
                      ctx.write(''.join(('<li>' + axType[attribute],
                        '<input name="openid.{}.type.{}" type="hidden" value="{}"/>'.format(axAlias, attribute, axType[attribute]),
                        '<input name="openid.{}.value.{}" type="hidden" value="{}"/>'.format(axAlias, attribute, axValue[axType[attribute]]))))

                    ctx.write('</ul>')

                sreg = {
                  'nickname': 'nottheoilrig',
                  'email': sender + '@nottheoilrig.com',
                  'fullname': 'Jack Bates' }

                for itm in 'optional', 'required':
                  try:
                    field, = params['openid.sreg.' + itm]

                  except KeyError:
                    continue

                  signed += map('sreg.'.__add__, field.split(','))

                  ctx.write('<ul>')

                  for field in field.split(','):
                    ctx.write(''.join(('<li>' + field,
                      '<input name="openid.sreg.{}" type="hidden" value="{}"/>'.format(field, sreg[field]))))

                  ctx.write('</ul>')

                try:
                  policyUrl, = params['openid.sreg.policy_url']
                  ctx.write(policyUrl)

                except KeyError:
                  pass

                for key, value in (('assoc_handle', assocHandle),
                    ('claimed_id', 'http://nottheoilrig.com/' + sender),
                    ('identity', 'http://nottheoilrig.com/' + sender),
                    ('mode', 'id_res'),
                    ('ns', 'http://specs.openid.net/auth/2.0'),
                    ('op_endpoint', opEndpoint),
                    ('response_nonce', time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())),
                    ('return_to', returnTo),
                    ('sig', 'TODO'),
                    ('signed', ','.join(signed))):
                  ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

                ctx.write(''.join(('<input type="submit" value="Approve"/>',
                      '</form>',
                    '</body>',
                  '</html>')))

                return ctx.finish()

          ctx.setHeader('Content-Type', 'text/html')

          ctx.write(''.join(('<html>',
            '<head>',
              '<title></title>',
            '</head><body onload="document.forms[0].submit()">',
              '<form action="{}" method="post">'.format(returnTo))))

          for key, value in (('mode', 'cancel'),
              ('ns', 'http://specs.openid.net/auth/2.0')):
            ctx.write('<input name="openid.{}" type="hidden" value="{}"/>'.format(key, value))

          ctx.write(''.join(('<input type="submit" value="Continue"/>',
                '</form>',
                '<script>document.forms[0].style.display = "none"</script>',
              '</body>',
            '</html>')))

        ctx.finish()

reactor.listenTCP(5629, factory, interface='localhost')

reactor.run()
